# [TITLE]
# AD Cleanup by Ryan Smith
#
# [DESCRIPTION]
# This script performs cleanup operations for Active Directory.  It is intended
# to run as a weekly scheduled task.  A summary of all cleanup operations
# performed is emailed to a specified address.
#
# Cleanup Operations:
#    1. Disable user accounts that have never logged in or set a password.


# MODULES
Import-Module ActiveDirectory


# USER ADJUSTABLE VARIABLES
$user_NumberOfWeeksTillDisableForNeverLoggedOn = 7
$mailRecipients = @("infrateam@paynearby.in")
$mailSender = "NBTDC AD Cleanup <helpdesk@paynearby.in>"
$mailSubject = "NBTDC AD Cleanup Report"
$mailServer = "192.168.21.164"


# INTERNAL VARIABLES
$user_NeverLoggedOnDisableDate = (Get-Date).AddDays(-$user_NumberOfWeeksTillDisableForNeverLoggedOn * 7)
$sb = New-Object -TypeName System.Text.StringBuilder
$scriptNameAndPath = $MyInvocation.MyCommand.Definition
$scriptPath = Split-Path -Parent $scriptNameAndPath



# USER ACCOUNT CLEANUP

# Re-initialize the StringBuilder object used for the email body.
$sb = New-Object -TypeName System.Text.StringBuilder

# Get a list of user accounts that haven't set a password and haven't been
# modified for more than the specified number of weeks.
$usersToDisable = Get-ADUser -Filter `
   {(Enabled -eq $True) -and ((pwdLastSet -le $user_NeverLoggedOnDisableDate) -or (pwdLastSet -eq 0)) -and (PasswordNeverExpires -eq $false)} `
   -Properties sAMAccountName,GivenName,sn,Description,CanonicalName,whenChanged,PasswordNeverExpires,pwdlastset -SearchBase "OU=Nearby_Technologies,DC=nbtdc,DC=local" | sort sAMAccountName 
   

$eusers=Get-ADUser -LDAPFilter "(!employeeID=*)" -SearchBase "OU=Nearby_Technologies,DC=nbtdc,DC=local"

foreach($euser in $eusers)
{
set-aduser $euser.samaccountname -EmployeeID $euser.samaccountname

}


# Check if any results were returned.
if (($usersToDisable -ne $null) -and @($usersToDisable).Count -gt 0) {
   # For each user account returned, disable the account and set the account
   # description to signify the account was auto-disabled.  The 'auto-disabled'
   # notes will be appended to the existing description if one exists.
   foreach ($user in $usersToDisable) {
      $userDescription = $user.Description
      Disable-ADAccount $user
      if ($userDescription.Length -gt 0) {
         Set-ADUser $user -Description "$userDescription (Auto-disabled $(Get-Date -Format 'd') -)"
      } else {
         Set-ADUser $user -Description "Auto-disabled $(Get-Date -Format 'd') - Never logged in"
      }
   }

   # Append each SAM account name, along with their real name, description (if
   # any), and canonical name (this is like a reversed distinguished name) to
   # the email body.
   $sb.AppendLine("The following user accounts have been disabled for failing to set a password in over $user_NumberOfWeeksTillDisableForNeverLoggedOn weeks:")
   $sb.AppendLine()
   foreach ($user in $usersToDisable) {
      $sb.AppendLine($user.sAMAccountName.ToUpper())
      $sb.AppendLine($user.GivenName + " " + $user.sn)
      if ($user.Description.Length -gt 0) {$sb.AppendLine("(" + $user.Description + ")")}
      $sb.AppendLine($user.CanonicalName)
      $sb.AppendLine()
   }
   $sb.AppendLine()
}

# If any text has been added to the message body, generate and send email.
if ($sb.Length -gt 0) {
   $sb.AppendLine("[*] This email was generated by $scriptNameAndPath on $env:ComputerName.  The script runs as a scheduled task.")
   Send-MailMessage -To $mailRecipients -From $mailSender -Subject $mailSubject -SmtpServer $mailServer -Port 25 -Body $sb.ToString()
}